// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(OsmoseInverseDbContext))]
    [Migration("20240526120606_3")]
    partial class _3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Atelier", b =>
                {
                    b.Property<Guid>("IdAtelier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomAtelier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FkFiliale")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdAtelier");

                    b.HasIndex("FkFiliale");

                    b.ToTable("Atelier");
                });

            modelBuilder.Entity("Domain.Models.Filiale", b =>
                {
                    b.Property<Guid>("IdFiliale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomFiliale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFiliale");

                    b.ToTable("Filiale");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<Guid>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NomRole")
                        .HasColumnType("int");

                    b.HasKey("IdRole");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Domain.Models.Station", b =>
                {
                    b.Property<Guid>("IdStation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkAtelier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActif")
                        .HasColumnType("bit");

                    b.Property<double>("StationCapacity")
                        .HasColumnType("float");

                    b.Property<string>("StationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAmmortissement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStation");

                    b.HasIndex("FkAtelier");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("Domain.Models.Compte", b =>
                {
                    b.Property<Guid>("IdCompte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FkFiliale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCompte");

                    b.HasIndex("FkFiliale");

                    b.HasIndex("FkRole");

                    b.ToTable("Compte");
                });

            modelBuilder.Entity("Domain.Models.Atelier", b =>
                {
                    b.HasOne("Domain.Models.Filiale", "Filiale")
                        .WithMany("Ateliers")
                        .HasForeignKey("FkFiliale")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Models.Station", b =>
                {
                    b.HasOne("Domain.Models.Atelier", "Atelier")
                        .WithMany("Station")
                        .HasForeignKey("FkAtelier")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Models.Compte", b =>
                {
                    b.HasOne("Domain.Models.Filiale", "Filiale")
                        .WithMany("Comptes")
                        .HasForeignKey("FkFiliale")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Models.Role", "Role")
                        .WithMany("Comptes")
                        .HasForeignKey("FkRole")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
